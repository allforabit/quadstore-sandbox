"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sparqlStream = exports.sparql = exports.parse = void 0;
const sparqlalgebrajs_1 = require("sparqlalgebrajs");
const comunica = __importStar(require("./comunica"));
const deleteInsert = __importStar(require("./deleteInsert"));
const parse = (store, query) => {
    return sparqlalgebrajs_1.translate(query, {
        quads: true,
        dataFactory: store.dataFactory,
    });
};
exports.parse = parse;
const sparql = async (store, query, opts) => {
    const operation = typeof query === 'string'
        ? exports.parse(store, query)
        : query;
    const fork = store.fork({ sparqlMode: true, ...opts });
    switch (operation.type) {
        case sparqlalgebrajs_1.Algebra.types.PROJECT:
        case sparqlalgebrajs_1.Algebra.types.BGP:
        case sparqlalgebrajs_1.Algebra.types.SLICE:
        case sparqlalgebrajs_1.Algebra.types.CONSTRUCT:
        case sparqlalgebrajs_1.Algebra.types.DESCRIBE:
        case sparqlalgebrajs_1.Algebra.types.ORDER_BY:
            return await comunica.handleQuery(fork, operation);
        case sparqlalgebrajs_1.Algebra.types.DELETE_INSERT:
            return await deleteInsert.handleQuery(fork, operation);
        default:
            throw new Error(`Unsupported SPARQL operation "${operation.type}"`);
    }
};
exports.sparql = sparql;
const sparqlStream = async (store, query, opts) => {
    const operation = typeof query === 'string'
        ? exports.parse(store, query)
        : query;
    const fork = store.fork({ sparqlMode: true, ...opts });
    switch (operation.type) {
        case sparqlalgebrajs_1.Algebra.types.PROJECT:
        case sparqlalgebrajs_1.Algebra.types.BGP:
        case sparqlalgebrajs_1.Algebra.types.SLICE:
        case sparqlalgebrajs_1.Algebra.types.DESCRIBE:
        case sparqlalgebrajs_1.Algebra.types.CONSTRUCT:
        case sparqlalgebrajs_1.Algebra.types.ORDER_BY:
            return await comunica.handleQueryStream(fork, operation);
        case sparqlalgebrajs_1.Algebra.types.DELETE_INSERT:
            throw new Error(`SPARQL DELETE/INSERT queries must use the "sparql()" method`);
        default:
            throw new Error(`Unsupported SPARQL operation "${operation.type}"`);
    }
};
exports.sparqlStream = sparqlStream;
//# sourceMappingURL=index.js.map