/// <reference types="node" />
import { EventEmitter } from 'events';
import { DataFactory, Quad, Quad_Graph, Quad_Object, Quad_Predicate, Quad_Subject, Store, Stream } from 'rdf-js';
import { DefaultGraphMode, DelStreamOpts, DelOpts, PutOpts, PatchOpts, GetOpts, InternalIndex, PutStreamOpts, BindingArrayResult, BindingStreamResult, BooleanResult, Pattern, QuadArrayResult, QuadStreamResult, StoreOpts, VoidResult, TSReadable, SparqlOpts, TermName, Prefixes } from './types';
import { AbstractLevelDOWN } from 'abstract-leveldown';
import { Algebra } from 'sparqlalgebrajs';
import { Scope } from './scope';
import { ComunicaActorInitSparql } from './types/comunica';
export declare class Quadstore implements Store {
    readonly db: AbstractLevelDOWN;
    readonly indexes: InternalIndex[];
    readonly id: string;
    readonly comunica: ComunicaActorInitSparql;
    readonly prefixes: Prefixes;
    readonly dataFactory: DataFactory;
    sparqlMode: boolean;
    defaultGraphMode: DefaultGraphMode;
    constructor(opts: StoreOpts);
    fork(opts?: {
        defaultGraphMode?: DefaultGraphMode;
        sparqlMode?: boolean;
    }): Quadstore;
    protected ensureReady(): void;
    protected waitForStatus(status: string, timeout?: number): Promise<void>;
    open(): Promise<void>;
    close(): Promise<void>;
    toString(): string;
    toJSON(): string;
    _addIndex(terms: TermName[]): void;
    clear(): Promise<void>;
    match(subject?: Quad_Subject, predicate?: Quad_Predicate, object?: Quad_Object, graph?: Quad_Graph, opts?: GetOpts): Stream<Quad>;
    countQuads(subject?: Quad_Subject, predicate?: Quad_Predicate, object?: Quad_Object, graph?: Quad_Graph, opts?: GetOpts): Promise<number>;
    import(source: Stream<Quad>): EventEmitter;
    remove(source: Stream<Quad>): EventEmitter;
    removeMatches(subject?: Quad_Subject, predicate?: Quad_Predicate, object?: Quad_Object, graph?: Quad_Graph, opts?: GetOpts): EventEmitter;
    deleteGraph(graph: Quad_Graph): EventEmitter;
    getApproximateSize(pattern: Pattern, opts?: GetOpts): Promise<import("./types").ApproximateSizeResult>;
    sparql(query: Algebra.Operation | string, opts?: SparqlOpts): Promise<QuadArrayResult | BindingArrayResult | VoidResult | BooleanResult>;
    put(quad: Quad, opts?: PutOpts): Promise<VoidResult>;
    multiPut(quads: Quad[], opts?: PutOpts): Promise<VoidResult>;
    del(quad: Quad, opts?: DelOpts): Promise<VoidResult>;
    multiDel(quads: Quad[], opts?: DelOpts): Promise<VoidResult>;
    patch(oldQuad: Quad, newQuad: Quad, opts?: PatchOpts): Promise<VoidResult>;
    multiPatch(oldQuads: Quad[], newQuads: Quad[], opts?: PatchOpts): Promise<VoidResult>;
    private writeBatch;
    get(pattern: Pattern, opts?: GetOpts): Promise<QuadArrayResult>;
    getStream(pattern: Pattern, opts?: GetOpts): Promise<QuadStreamResult>;
    putStream(source: TSReadable<Quad>, opts?: PutStreamOpts): Promise<VoidResult>;
    delStream(source: TSReadable<Quad>, opts?: DelStreamOpts): Promise<VoidResult>;
    sparqlStream(query: Algebra.Operation | string, opts?: SparqlOpts): Promise<QuadStreamResult | BindingStreamResult | VoidResult | BooleanResult>;
    initScope(): Promise<Scope>;
    loadScope(scopeId: string): Promise<Scope>;
    deleteScope(scopeId: string): Promise<void>;
    deleteAllScopes(): Promise<void>;
}
