"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeImportedQuad = exports.exportQuad = exports.exportLiteralTerm = void 0;
const xsd = __importStar(require("./xsd"));
const exportLiteralTerm = (term, dataFactory, prefixes) => {
    const [, encoding, datatype, language, value] = term.split('^');
    const expandedDatatype = prefixes.expandTerm(datatype);
    switch (expandedDatatype) {
        case xsd.langString:
            if (language !== '') {
                return dataFactory.literal(value, language);
            }
            return dataFactory.literal(value);
        default:
            return dataFactory.literal(value, dataFactory.namedNode(expandedDatatype));
    }
};
exports.exportLiteralTerm = exportLiteralTerm;
const exportQuadSubject = (term, dataFactory, prefixes) => {
    switch (term[0]) {
        case '_':
            return dataFactory.blankNode(term.substr(2));
        case '?':
            if (dataFactory.variable) {
                return dataFactory.variable(term.substr(1));
            }
            throw new Error('DataFactory does not support variables');
        case '^':
            throw new Error('No literals as subject');
        default:
            return dataFactory.namedNode(prefixes.expandTerm(term));
    }
};
const exportQuadPredicate = (term, dataFactory, prefixes) => {
    switch (term[0]) {
        case '_':
            throw new Error('No blank nodes as predicates');
        case '?':
            if (dataFactory.variable) {
                return dataFactory.variable(term.substr(1));
            }
            throw new Error('DataFactory does not support variables');
        case '^':
            throw new Error('No literals as predicates');
        default:
            return dataFactory.namedNode(prefixes.expandTerm(term));
    }
};
const exportQuadObject = (term, dataFactory, prefixes) => {
    switch (term[0]) {
        case '_':
            return dataFactory.blankNode(term.substr(2));
        case '?':
            if (dataFactory.variable) {
                return dataFactory.variable(term.substr(1));
            }
            throw new Error('DataFactory does not support variables');
        case '^':
            return exports.exportLiteralTerm(term, dataFactory, prefixes);
        default:
            return dataFactory.namedNode(prefixes.expandTerm(term));
    }
};
const exportQuadGraph = (term, defaultGraphValue, dataFactory, prefixes) => {
    if (term === defaultGraphValue) {
        return dataFactory.defaultGraph();
    }
    switch (term[0]) {
        case '_':
            return dataFactory.blankNode(term.substr(2));
        case '?':
            if (dataFactory.variable) {
                return dataFactory.variable(term.substr(1));
            }
            throw new Error('DataFactory does not support variables');
        case '^':
            throw new Error('No literals as graphs');
        default:
            return dataFactory.namedNode(prefixes.expandTerm(term));
    }
};
const exportQuad = (quad, defaultGraphValue, dataFactory, prefixes) => {
    return dataFactory.quad(exportQuadSubject(quad.subject, dataFactory, prefixes), exportQuadPredicate(quad.predicate, dataFactory, prefixes), exportQuadObject(quad.object, dataFactory, prefixes), exportQuadGraph(quad.graph, defaultGraphValue, dataFactory, prefixes));
};
exports.exportQuad = exportQuad;
const deserializeImportedQuad = (quad) => {
    return JSON.parse(quad);
};
exports.deserializeImportedQuad = deserializeImportedQuad;
//# sourceMappingURL=export.js.map