import { BufferedIterator } from 'asynciterator';
import { AbstractIterator } from 'abstract-leveldown';
declare type MapFn<K, V, T> = (key: K, value: V) => T;
export declare class LevelIterator<K, V, T> extends BufferedIterator<T> {
    level: AbstractIterator<K, V>;
    mapFn: MapFn<K, V, T>;
    constructor(levelIterator: AbstractIterator<K, V>, mapper: MapFn<K, V, T>);
    _read(qty: number, done: (err?: Error) => void): void;
    protected onNextValue(err: Error | undefined, key: K, value: V, remaining: number, loop: (remaining: number) => void, done: (err?: Error) => void): void;
    protected _end(destroy?: boolean): void;
    protected _destroy(cause: Error | undefined, cb: (err?: Error) => void): void;
}
export {};
